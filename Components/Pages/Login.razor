@page "/"
@using Expenses_tracker.Components.Layout
@layout AuthLayout
@inject NavigationManager NavigationManager
@using Expenses_tracker.Services
@inject Expenses_tracker.Services.AuthServices AuthServices

<link href="https://cdn.jsdelivr.net/npm/bootstrap-icons/font/bootstrap-icons.css" rel="stylesheet">
<link href="/css/StyleSheet1.css" rel="stylesheet">
<div class="container-fluid h-100">
    <div class="row h-100">
        <!-- Left side with image and text -->
        <div class="col-md-6 bg-white p-5">
            <div class="finance-section">
                <img src="/chart-with-magnifier.jpg" alt="Finance Chart" class="img-fluid mb-4" />
                <h1 class="display-4 fw-bold text-dark">Track Your Expenses</h1>
                <p class="lead text-muted">
                    Take control of your finances with powerful expense tracking tools.
                </p>
            </div>
        </div>

        <!-- Right side with login form -->
        <div class="col-md-6 d-flex align-items-center justify-content-center">
            <div class="login-form-container" style="width: 80%; max-width: 400px;">
                <h2 class="mb-4">Login to your account</h2>
                <form @onsubmit="HandleLogin">
                    <div class="mb-3">
                        <label for="username" class="form-label">Username</label>
                        <div class="input-group">
                            <span class="input-group-text">
                                <i class="bi bi-person"></i>
                            </span>
                            <input type="text"
                                   class="form-control"
                                   id="username"
                                   placeholder="your username"
                                   @bind="Username" />
                        </div>
                    </div>

                    <div class="mb-3">
                        <label for="password" class="form-label">Password</label>
                        <div class="input-group">
                            <span class="input-group-text">
                                <i class="bi bi-lock"></i>
                            </span>
                            <input type="password"
                                   class="form-control"
                                   id="password"
                                   placeholder="password"
                                   @bind="Password" />
                        </div>
                    </div>

                    <div class="d-flex justify-content-between align-items-center mb-3">
                        <div class="form-check">
                            <input type="checkbox"
                                   class="form-check-input"
                                   id="rememberMe"
                                   @bind="RememberMe" />
                            <label class="form-check-label" for="rememberMe">Remember me</label>
                        </div>
                        <a href="/forgot-password" class="text-decoration-none">Forgot password?</a>
                    </div>

                    @if (ShowLoginMessage)
                    {
                        <div class="@LoginMessageClass mt-2">@LoginMessage</div>
                    }


                    <button type="submit" class="btn btn-dark w-100 py-2 mb-3">Sign in</button>

                    <div class="text-center">
                        <span>Don't have an account? </span>
                        <a href="/Signup" class="text-decoration-none">Sign up</a>
                    </div>
                </form>
            </div>
        </div>
    </div>
</div>

@code
{
    private string Username;
    private string Password;
    private bool RememberMe;
    private string LoginMessage = string.Empty; // To display login success/error message
    private bool ShowLoginMessage = false; // To control the visibility of the login message
    private string LoginMessageClass = string.Empty; // To determine message color (red/green)

    private Func<string, string, Task<bool>> Users;

    protected override void OnInitialized()
    {
        // Initialize the delegate to point to the AuthServices.AuthenticateUser method
        Users = AuthServices.AuthenticateUser;
    }

    private async Task HandleLogin()
    {
        try
        {
            // Reset the message
            ShowLoginMessage = false;
            LoginMessage = string.Empty;

            // Validate input fields
            if (string.IsNullOrEmpty(Username) || string.IsNullOrEmpty(Password))
            {
                LoginMessage = "Please fill out all required fields.";
                LoginMessageClass = "text-danger"; // Red color for error
                ShowLoginMessage = true;
                return;
            }

            // Use the Users delegate to validate login
            var isLoginSuccessful = await Users(Username, Password);

            if (isLoginSuccessful)
            {
                LoginMessage = "Login successful!";
                LoginMessageClass = "text-success"; // Green color for success
                ShowLoginMessage = true;

                // Clear the input fields
                Username = string.Empty;
                Password = string.Empty;
                RememberMe = false;

                // Redirect user to dashboard or home page
                NavigationManager.NavigateTo("/dashboard");
            }
            else
            {
                LoginMessage = "Invalid username or password.";
                LoginMessageClass = "text-danger"; // Red color for error
                ShowLoginMessage = true;
            }
        }
        catch (Exception ex)
        {
            // Handle unexpected errors
            LoginMessage = $"An error occurred: {ex.Message}";
            LoginMessageClass = "text-danger"; // Red color for error
            ShowLoginMessage = true;
        }
    }
}



