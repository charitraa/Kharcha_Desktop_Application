<!-- Income Modal -->
@using Expenses_tracker.Services
@inject Expenses_tracker.Services.AuthServices Transactions
@inject NavigationManager NavigationManager

<div class="modal fade" id="addIncomeModal" tabindex="-1" aria-labelledby="addIncomeLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="addIncomeLabel">Record New Income</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                @if (!string.IsNullOrEmpty(Message)){
                    <div class="alert alert-info mb-3" role="alert">
                        @Message
                    </div>
                }
                <form @onsubmit="HandleSubmit">
                    <div class="mb-3">
                        <label for="incomeTitle" class="form-label">Title</label>
                        <input type="text" class="form-control" id="incomeTitle" @bind="Title" placeholder="Income Title" />
                    </div>
                    <div class="mb-3">
                        <label for="incomeAmount" class="form-label">Amount</label>
                        <input type="number" class="form-control" id="incomeAmount" @bind="Amount" placeholder="$ 0.00" />
                    </div>

                    <div class="mb-3">
                        <label for="incomeNotes" class="form-label">Notes</label>
                        <input type="text" class="form-control" id="incomeNotes" @bind="Notes" placeholder="Salary, Business Income" />
                    </div>
                    <div class="mb-3">
                        <label for="incomeTags" class="form-label">Tags</label>
                        <input type="text" class="form-control" id="incomeTags" @bind="Tags" placeholder="Add tags (comma separated)" />
                    </div>
                    @if (!string.IsNullOrEmpty(ErrorMessage))
                    {
                        <div class="alert-danger alert-info mb-3" role="alert">
                            @ErrorMessage
                        </div>
                    }

                    <div class="d-grid">
                        <button type="submit" class="btn btn-dark">Save Income</button>
                    </div>
                </form>
            </div>
        </div>
    </div>
</div>



@code {

    private string Title;
    private decimal Amount;
    private string Notes;
    private string Tags;
    private string Message; 
    private string ErrorMessage;

    public Func<string ,string, decimal, string, string, bool, Task<bool>> Transaction;

    protected override void OnInitialized()
    {
        Transaction = Transactions.AddTransaction;
    }

    private void ReloadPage()
    {
        // Navigate to the current URL to reload the page
        NavigationManager.NavigateTo(NavigationManager.Uri, forceLoad: true);
    }

    private async Task HandleSubmit()
    {
        try
        {
            // Reset messages
            Message = null;
            ErrorMessage = null;

            // Validate input fields
            if (string.IsNullOrEmpty(Title) || Amount <= 0)
            {
                ErrorMessage = "Please fill out all required fields correctly.";
                return;
            }

            // Add transaction
            var result = await Task.Run(() =>
                Transaction(StaticValue.UserId,Title, Amount, Notes, Tags, true)
            );

            // Reset fields after success
            Title = string.Empty;
            Amount = 0;
            Notes = string.Empty;
            Tags = string.Empty;

            Message = "Transaction successfully added!";

            ReloadPage();

            
        }
        catch (Exception ex)
        {
            // Handle and display the error message
            ErrorMessage = $"Error: {ex.Message}";
            // Optionally, display a user-friendly message on the UI
        }
    }
}

