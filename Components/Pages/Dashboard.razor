 @page "/dashboard" 
 @using Expenses_tracker.Services
 @using Expenses_tracker.Models
 @using Newtonsoft.Json
 @inject NavigationManager NavigationManager

<div class="dashboard-container"> 
    <!-- financial overview section --> 
    <section class="mb-4">
        <div class="row g-2">

            <div class="d-flex justify-content-between align-items-center mb-3">
                <h2 class="mb-4">Financial Overview</h2>
                <div class="dropdown">
                    <button class="btn btn-light dropdown-toggle" type="button" data-bs-toggle="dropdown">
                        Filter
                    </button>
                    <ul class="dropdown-menu">
                        <li><a class="dropdown-item" @onclick='() => SetFilterType("All")'>All</a></li>
                        <li><a class="dropdown-item" @onclick='() => SetFilterType("Calendar")'>Select Date Range</a></li>
                    </ul>
                </div>
            </div>
            @if (FilterSelection == "Calendar")
            {
                <div class="mb-3">
                    <label for="startDate">Start Date:</label>
                    <InputDate id="startDate" @bind-Value="StartDate" class="form-control" />
                </div>
                <div class="mb-3">
                    <label for="endDate">End Date:</label>
                    <InputDate id="endDate" @bind-Value="EndDate" class="form-control" />
                </div>
                <button class="btn btn-primary" @onclick="async () => await ApplyFilter()">Apply Filter</button>

            }
        </div>
        <div class="row g-4"> 
            <div class="col-md-3"> 
                <div class="overview-card"> 
                    <div class="d-flex justify-content-between mb-2"> 
                        <span class="text-muted">Total Balance</span> 
                        <i class="bi bi-wallet2"></i> 
                    </div> 
                    <h3 class="mb-0">@Symbol @TotalBalance</h3>
                </div> 
            </div> 
            <div class="col-md-3"> 
                <div class="overview-card"> 
                    <div class="d-flex justify-content-between mb-2"> 
                        <span class="text-muted">Total Income</span> 
                        <i class="bi bi-star"></i> 
                    </div> 
                    <h3 class="mb-0">@Symbol @income</h3>

                </div> 
            </div> 
            <div class="col-md-3"> 
                <div class="overview-card"> 
                    <div class="d-flex justify-content-between mb-2"> 
                        <span class="text-muted">Total Expenses</span> 
                        <i class="bi bi-graph-down"></i> 
                    </div> 
                    <h3 class="mb-0">@Symbol @Expense</h3>

                </div> 
            </div> 
            <div class="col-md-3"> 
                <div class="overview-card"> 
                    <div class="d-flex justify-content-between mb-2"> 
                        <span class="text-muted">Total Debt</span> 
                        <i class="bi bi-credit-card"></i> 
                    </div> 
                    <h3 class="mb-0">@Symbol @Debt</h3>
                </div> 
            </div> 
        </div> 
    </section> 

    <!-- pending debts section --> 
    <section class="mb-4"> 
        <div class="d-flex justify-content-between align-items-center mb-3"> 
            <h3>Pending Debts (@No_of_pending_debts)</h3>

        </div> 


        <div class="table-responsive">
            <table class="table">
                <thead>
                    <tr>
                        <th>Notes</th>
                        <th class="text-muted">Due Date</th>
                        <th class="text-end">Amount</th>
                    </tr>
                </thead>
                <tbody>
                    @if (Debts != null && Debts.Any())
                    {
                        foreach (var debt in Debts)
                        {
                            <tr>
                                <td>@debt.Notes</td>
                                <td class="text-muted">@debt.DueDate</td>
                                <td class="text-end">@Symbol @debt.Amount</td>
                            </tr>
                        }
                    }
                    else
                    {
                        <tr>
                            <td colspan="3" class="text-center">No unpaid debts found.</td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>

    </section> 

    <!-- recent transactions section --> 
    <section> 
        <div class="d-flex justify-content-between align-items-center mb-3"> 
            @if (FilterSelection == "Transaction")
            {
                <h3>All Transactions</h3>
            }
            else
            {
                <h3>Recent Transactions</h3>
            }
           
        </div> 


        <div class="table-responsive">
            <table class="table">
                <tbody>
                    @if (TransactionsData != null && TransactionsData.Any())
                    {
                        foreach (var transaction in TransactionsData)
                        {
                            <tr>
                                <td>
                                    <div class="d-flex align-items-center gap-2">
                                        <div class="transaction-icon @(transaction.Type == "Income" ? "bg-success" : "bg-danger")">
                                            <i class="bi @(transaction.Type == "Income" ? "bi-wallet2" : "bi-cart")"></i>
                                        </div>
                                        @transaction.Title
                                    </div>
                                </td>
                                <td class="text-muted">@transaction.Date</td>
                                <td class="text-end @(transaction.Type == "Income" ? "text-success" : "text-danger")">
                                    @Symbol @transaction.Amount
                                </td>
                            </tr>
                        }
                    }
                    else
                    {
                        <tr>
                            <td colspan="3" class="text-center">No transactions available.</td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>

    </section> 
</div> 

@code {
    private decimal income = 0;
    private decimal Expense = 0;
    private decimal Debt = 0;
    private string Symbol = "";
    private decimal TotalBalance = 0;
    private string FilterSelection { get; set; } = "All";
    private DateOnly StartDate { get; set; }
    private DateOnly EndDate { get; set; }
    public static List<DebtModels> Debts { get; private set; } = new();
    public static int No_of_pending_debts = 0;
    public static List<Transactions> TransactionsData { get; private set; } = new();

    protected override async Task OnInitializedAsync()
    {
        income = await FetchTotalIncome();
        Expense = await FetchTotalExpense();
        Debt = await FetchTotalDebt();
        TotalBalance = await FetchTotalBalance();
        StaticValue.TotalBalance = TotalBalance;
        Symbol = StaticValue.CurrencySymbol;
        await FetchUnPaidDebt(StaticValue.filePath);
        await FetchLimitedTransactions(StaticValue.filePath);

    }
    public async Task<decimal> FetchTotalIncome()
    {
        if (!File.Exists(StaticValue.filePath))
        {
            throw new FileNotFoundException("The specified JSON file was not found.", StaticValue.filePath);
        }

        string jsonData = await File.ReadAllTextAsync(StaticValue.filePath);
        var users = JsonConvert.DeserializeObject<List<User>>(jsonData);

        // Find the specific user by UserId
        var user = users.FirstOrDefault(u => u.Id == StaticValue.UserId);

        if (user == null)
        {
            return 0; // Return 0 if the user is not found
        }

        // Calculate total income for the specific user
        return user.Transactions
                   .Where(transaction => transaction.Type.Equals("Income", StringComparison.OrdinalIgnoreCase))
                   .Sum(transaction => transaction.Amount);
    }

    private void SetFilterType(string filterType)
    {
        FilterSelection = filterType;
        if (filterType == "All")
        {
            ReloadPage();
        }
    }
    public string ErrorMessage;

    private async Task ApplyFilter()
    {
        if (StartDate == null || EndDate == null)
        {
            ErrorMessage = "Please select both start and end dates.";
            return;
        }

        // Fetch and filter user data
        string jsonData = await File.ReadAllTextAsync(StaticValue.filePath);
        var users = JsonConvert.DeserializeObject<List<User>>(jsonData);
        var user = users?.FirstOrDefault(u => u.Id == StaticValue.UserId);

        if (user != null)
        {
            // Filter transactions
            TransactionsData = user.Transactions
             .Where(t => DateOnly.TryParse(t.Date, out var transactionDate) 
                         && transactionDate >= StartDate             
                         && transactionDate <= EndDate)             
             .OrderByDescending(t => DateTime.Parse(t.Date))               
             .ToList();

            // Recalculate totals
            income = TransactionsData
                .Where(t => t.Type.Equals("Income", StringComparison.OrdinalIgnoreCase))
                .Sum(t => t.Amount);

            Expense = TransactionsData
                .Where(t => t.Type.Equals("Expense", StringComparison.OrdinalIgnoreCase))
                .Sum(t => t.Amount);

            TotalBalance = income - Expense;

            ErrorMessage = string.Empty;
            FilterSelection = "Transaction"; // Clear error message if successful
        }
        else
        {
            ErrorMessage = "User data not found.";
        }
    }


    private void ReloadPage()
    {
        // Navigate to the current URL to reload the page
        NavigationManager.NavigateTo(NavigationManager.Uri, forceLoad: true);
    }

    public async Task<decimal> FetchTotalExpense()
    {
        if (!File.Exists(StaticValue.filePath))
        {
            throw new FileNotFoundException("The specified JSON file was not found.", StaticValue.filePath);
        }

        string jsonData = await File.ReadAllTextAsync(StaticValue.filePath);
        var users = JsonConvert.DeserializeObject<List<User>>(jsonData);

        var user = users.FirstOrDefault(u => u.Id == StaticValue.UserId);

        if (user == null)
        {
            return 0;
        }

        return user.Transactions
                   .Where(transaction => transaction.Type.Equals("Expense", StringComparison.OrdinalIgnoreCase))
                   .Sum(transaction => transaction.Amount);
    }
    //functions to get total debts
    public async Task<decimal> FetchTotalDebt()
    {
        if (!File.Exists(StaticValue.filePath))
        {
            throw new FileNotFoundException("The specified JSON file was not found.", StaticValue.filePath);
        }

        string jsonData = await File.ReadAllTextAsync(StaticValue.filePath);
        var users = JsonConvert.DeserializeObject<List<User>>(jsonData);

        var user = users.FirstOrDefault(u => u.Id == StaticValue.UserId);

        if (user == null)
        {
            return 0;
        }

        return user.Debts.Sum(debt => debt.Amount);
    }

    //functions to get total balance
    public async Task<decimal> FetchTotalBalance()
    {
        if (!File.Exists(StaticValue.filePath))
        {
            throw new FileNotFoundException("The specified JSON file was not found.", StaticValue.filePath);
        }

        string jsonData = await File.ReadAllTextAsync(StaticValue.filePath);
        var users = JsonConvert.DeserializeObject<List<User>>(jsonData);

        var user = users.FirstOrDefault(u => u.Id == StaticValue.UserId);

        if (user == null)
        {
            return 0;
        }

        return user.TotalBalance;
    }

    //fetch unpaid debts 
    public static async Task FetchUnPaidDebt(string filePath)
    {
        if (!File.Exists(filePath))
        {
            Console.WriteLine("File not found.");
            return;
        }

        string jsonData = await File.ReadAllTextAsync(filePath);
        var users = JsonConvert.DeserializeObject<List<User>>(jsonData);

        var user = users.FirstOrDefault(u => u.Id == StaticValue.UserId);

        if (user != null)
        {
            Debts = user.Debts.Where(debt => !debt.IsPaid).ToList();
            No_of_pending_debts = Debts.Count;
        }
        else
        {
            Debts = new List<DebtModels>();
        }
    }


    //fetch the transactions
    public static async Task FetchLimitedTransactions(string filePath)
    {
        if (!File.Exists(filePath))
        {
            Console.WriteLine("File not found.");
            return;
        }

        string jsonData = await File.ReadAllTextAsync(filePath);
        var users = JsonConvert.DeserializeObject<List<User>>(jsonData);

        var user = users.FirstOrDefault(u => u.Id == StaticValue.UserId);

        if (user != null)
        {
            TransactionsData = user.Transactions
                                  .OrderByDescending(t => t.Date) // Sort by Date
                                  .Take(4)
                                  .ToList();
        }
        else
        {
            TransactionsData = new List<Transactions>();
        }
    }

} 

 <style> 
     .dashboard-container { 
         padding: 1rem; 
     } 

     .overview-card { 
         background: white; 
         padding: 1.5rem; 
         border-radius: 8px; 
         box-shadow: 0 1px 3px rgba(0,0,0,0.1); 
     } 

     .transaction-icon { 
         width: 40px; 
         height: 40px; 
         border-radius: 50%; 
         background-color: #fee2e2; 
         display: flex; 
         align-items: center; 
         justify-content: center; 
         color: #dc2626; 
     } 

         .transaction-icon.bg-success { 
             background-color: #dcfce7; 
             color: #16a34a; 
         } 

     .table td { 
         vertical-align: middle; 
     } 

     .dropdown-toggle::after { 
         margin-left: 0.5em; 
     } 
 </style> 